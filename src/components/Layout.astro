---
import "@/styles/global.css";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import { ICP, PSB_ICP, PSB_ICP_URL, SITE_NAME, SITE_DESCRIPTION } from "@/consts";
import { ThemeScript } from 'astro-theme-toggle';
import { AstroSeo } from '@astrolib/seo';

// 定义Props接口
interface Props {
	title?: string;
	description?: string;
	date?: Date;
	tags?: string[];
}

// 获取完整的 URL
const canonicalURL = new URL(Astro.url.pathname, Astro.site);

// 从props中获取页面特定信息
const { title = SITE_NAME, description = SITE_DESCRIPTION, date, tags } = Astro.props;
---
<!doctype html>
<html lang="zh-CN" class="m-0 w-full h-full">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<meta name="referrer" content="no-referrer" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		
		<!-- 使用 AstroSeo 组件替换原有的 SEO 标签 -->
		<AstroSeo
			title={title}
			description={description || `${SITE_NAME} - 个人博客`}
			canonical={canonicalURL.toString()}
			openGraph={{
				type: 'article',
				url: canonicalURL.toString(),
				title: title,
				description: description || `${SITE_NAME} - 个人博客`,
				site_name: SITE_NAME,
				...(date && { article: { 
					publishedTime: date.toISOString(),
					tags: tags || []
				}}),
			}}
			twitter={{
				cardType: 'summary_large_image',
				site: SITE_NAME,
				handle: SITE_NAME,
			}}
			additionalMetaTags={[
				{
					property: 'article:published_time',
					content: date ? date.toISOString() : '',
				},
				...(tags?.map(tag => ({
					property: 'article:tag',
					content: tag,
				})) || []),
			]}
		/>
		
		<!-- 主题切换脚本 -->
		<ThemeScript />
	</head>
	<body class="m-0 w-full h-full bg-gray-50 dark:bg-dark-bg flex flex-col min-h-screen">
		<Header />
		<main class="pt-16 flex-grow">
			<slot />
		</main>
		<Footer icp={ICP} psbIcp={PSB_ICP} psbIcpUrl={PSB_ICP_URL} />
		
		<!-- 预获取脚本 -->
		<script>
			// 在DOM加载完成后执行
			document.addEventListener('astro:page-load', () => {
				// 获取所有视口预获取链接
				const viewportLinks = document.querySelectorAll('[data-astro-prefetch="viewport"]');
				
				if (viewportLinks.length > 0) {
					// 创建一个交叉观察器 
					const observer = new IntersectionObserver((entries) => {
						entries.forEach(entry => {
							if (entry.isIntersecting) {
								const link = entry.target;
								// 进入视口时，添加data-astro-prefetch="true"属性触发预获取
								if (link.getAttribute('data-astro-prefetch') === 'viewport') {
									link.setAttribute('data-astro-prefetch', 'true');
								}
								// 一旦预获取，就不再观察这个链接
								observer.unobserve(link);
							}
						});
					});
					
					// 观察所有视口预获取链接
					viewportLinks.forEach(link => {
						observer.observe(link);
					});
				}
			});
		</script>
	</body>
</html>
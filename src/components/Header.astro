---
import { SITE_NAME, NAV_LINKS } from "@/consts.ts";
import Search from "astro-pagefind/components/Search";
import ThemeToggle from "@/components/ThemeToggle.astro";
import "@/styles/header.css";
// 获取当前路径
const currentPath = Astro.url.pathname;

// 移除结尾的斜杠以统一路径格式（保留根路径的斜杠）
const normalizedPath =
  currentPath === "/"
    ? "/"
    : currentPath.endsWith("/")
      ? currentPath.slice(0, -1)
      : currentPath;

// 定义导航链接
---

<header
  class="fixed w-full top-0 z-50"
  id="main-header"
>
  <div
    class="absolute inset-0 bg-gray-50/95 dark:bg-dark-bg/95"
    id="header-bg"
  >
  </div>
  <nav class="relative">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between h-16">
        <!-- Logo 部分 -->
        <div class="flex items-center">
          <a
            href="/"
            class="text-xl md:text-2xl font-bold tracking-tight bg-gradient-to-r from-primary-600 to-primary-400 bg-clip-text text-transparent hover:from-primary-500 hover:to-primary-300 dark:from-primary-400 dark:to-primary-200 dark:hover:from-primary-300 dark:hover:to-primary-100"
          >
            {SITE_NAME}
          </a>
        </div>

        <!-- 导航链接 -->
        <div class="hidden md:flex md:items-center md:space-x-8">
          <!-- 桌面端搜索框 -->
          <Search
            className="pagefind-ui"
            uiOptions={{
              showImages: false,
              resetStyles: false,
              showSubResults: true,
              translations: {
                placeholder: "搜索文章...",
                clear_search: "清除",
                load_more: "加载更多结果",
                search_label: "搜索网站",
                filters_label: "筛选",
                zero_results: "未找到 [SEARCH_TERM] 的结果",
                many_results: "找到 [COUNT] 个 [SEARCH_TERM] 的结果",
                one_result: "找到 [COUNT] 个 [SEARCH_TERM] 的结果",
              },
            }}
          />

          {
            NAV_LINKS.map((link) => (
              <a
                href={link.href}
                class={`inline-flex items-center px-1 pt-1 text-sm font-medium ${
                  normalizedPath === link.href
                    ? "text-primary-600 dark:text-primary-400 border-b-2 border-primary-600 dark:border-primary-400"
                    : "text-secondary-600 dark:text-secondary-400 hover:text-primary-600 dark:hover:text-primary-400 hover:border-b-2 hover:border-primary-300 dark:hover:border-primary-700"
                }`}
                data-astro-prefetch="hover"
              >
                {link.text}
              </a>
            ))
          }
          <!-- 使用自定义主题切换组件 -->
          <div class="mt-1.5">
            <ThemeToggle className="group" />
          </div>
        </div>

        <!-- 移动端菜单按钮 -->
        <div class="flex items-center md:hidden">
          <!-- 移动端搜索按钮 -->
          <button
            type="button"
            id="mobile-search-button"
            class="inline-flex items-center justify-center p-2 rounded-md text-secondary-400 dark:text-secondary-500 hover:text-secondary-500 dark:hover:text-secondary-400 hover:bg-secondary-100 dark:hover:bg-dark-card focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primary-500 mr-2"
            aria-expanded="false"
            aria-label="搜索"
          >
            <span class="sr-only">搜索</span>
            <svg
              class="h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              aria-hidden="true"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
              ></path>
            </svg>
          </button>

          <button
            type="button"
            class="inline-flex items-center justify-center p-2 rounded-md text-secondary-400 dark:text-secondary-500 hover:text-secondary-500 dark:hover:text-secondary-400 hover:bg-secondary-100 dark:hover:bg-dark-card focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primary-500"
            id="mobile-menu-button"
            aria-expanded="false"
            aria-label="打开菜单"
          >
            <span class="sr-only">打开菜单</span>
            <svg
              class="h-6 w-6 block"
              id="menu-open-icon"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              aria-hidden="true"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M4 6h16M4 12h16M4 18h16"
              ></path>
            </svg>
            <svg
              class="h-6 w-6 hidden"
              id="menu-close-icon"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              aria-hidden="true"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M6 18L18 6M6 6l12 12"
              ></path>
            </svg>
          </button>
        </div>
      </div>
    </div>

    <!-- 移动端搜索面板 -->
    <div
      id="mobile-search-panel"
      class="hidden md:hidden fixed inset-x-0 top-16 p-4 bg-white dark:bg-gray-800 shadow-md z-50 border-t border-gray-200 dark:border-gray-700"
    >
      <div>
        <Search
          className="pagefind-ui"
          uiOptions={{
            showImages: false,
            resetStyles: false,
            showSubResults: true,
            translations: {
              placeholder: "搜索文章...",
              clear_search: "清除",
              load_more: "加载更多结果",
              search_label: "搜索网站",
              filters_label: "筛选",
              zero_results: "未找到 [SEARCH_TERM] 的结果",
              many_results: "找到 [COUNT] 个 [SEARCH_TERM] 的结果",
              one_result: "找到 [COUNT] 个 [SEARCH_TERM] 的结果",
            },
          }}
        />
      </div>
    </div>

    <!-- 移动端菜单 -->
    <div
      class="hidden md:hidden fixed inset-x-0 top-16 z-40"
      id="mobile-menu"
    >
      <div
        id="mobile-menu-bg"
        class="bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm shadow-lg border-t border-gray-200 dark:border-gray-700/50 rounded-b-lg"
      >
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-2">
          <div class="grid gap-1">
            {
              NAV_LINKS.map((link) => (
                <a
                  href={link.href}
                  class={`flex items-center px-3 py-3 rounded-lg text-base font-medium ${
                    normalizedPath === link.href
                      ? "text-white bg-primary-600 dark:bg-primary-500 shadow-sm"
                      : "text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-800/70"
                  }`}
                  data-astro-prefetch="hover"
                >
                  {link.text}
                </a>
              ))
            }
            <div
              class="mt-2 pt-3 border-t border-gray-200 dark:border-gray-700 flex items-center justify-between cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800/70 rounded-lg px-3 py-2"
              id="theme-toggle-container"
            >
              <span class="text-sm font-medium text-gray-600 dark:text-gray-300"
                >切换主题</span
              >
              <div
                class="group relative w-7 h-7 mt-1 flex items-center justify-center"
              >
                <ThemeToggle
                  width={14}
                  height={14}
                  className="group"
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </nav>
</header>

<script>
  // Header组件逻辑
  (function () {
    // 存储所有事件监听器，便于统一清理
    const listeners: Array<{
      element: EventTarget;
      eventType: string;
      handler: EventListenerOrEventListenerObject;
    }> = [];

    // 添加事件监听器并记录，方便后续统一清理
    function addListener<K extends keyof HTMLElementEventMap>(
      element: EventTarget | null,
      eventType: string,
      handler: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): EventListenerOrEventListenerObject | null {
      if (!element) return null;

      element.addEventListener(eventType, handler, options);
      listeners.push({ element, eventType, handler });
      return handler;
    }

    // 清理函数 - 移除所有事件监听器
    function cleanup(): void {
      listeners.forEach(({ element, eventType, handler }) => {
        try {
          element.removeEventListener(eventType, handler);
        } catch (err) {
          console.error(`移除Header事件监听器出错:`, err);
        }
      });
      listeners.length = 0;
    }

    // Header和导航高亮逻辑
    function initHeader(): void {
      // 获取桌面端导航链接（排除移动端菜单中的链接）
      const navLinks = document.querySelectorAll(".hidden.md\\:flex a[href]");

      // 检查路径是否匹配导航项
      function isPathMatchingNavItem(
        currentPath: string,
        navPath: string,
      ): boolean {
        // 精确匹配
        if (currentPath === navPath) {
          return true;
        }

        // 文章页面特殊处理 - 如果当前路径以 "/articles/" 开头，则匹配 "/articles" 导航
        if (currentPath.startsWith("/articles/") && navPath === "/articles") {
          return true;
        }

        return false;
      }

      // 更新导航高亮状态
      function updateNavHighlight(): void {
        const currentUrl = window.location.pathname;
        const normalizedPath =
          currentUrl === "/"
            ? "/"
            : currentUrl.endsWith("/")
              ? currentUrl.slice(0, -1)
              : currentUrl;

        // 更新桌面端导航链接
        navLinks.forEach((link) => {
          const href = link.getAttribute("href");
          const isActive = href
            ? isPathMatchingNavItem(normalizedPath, href)
            : false;

          // 使用 classList.toggle 来切换类
          link.classList.toggle("text-primary-600", isActive);
          link.classList.toggle("dark:text-primary-400", isActive);
          link.classList.toggle("border-b-2", isActive);
          link.classList.toggle("border-primary-600", isActive);
          link.classList.toggle("dark:border-primary-400", isActive);

          link.classList.toggle("text-secondary-600", !isActive);
          link.classList.toggle("dark:text-secondary-400", !isActive);
          link.classList.toggle("hover:text-primary-600", !isActive);
          link.classList.toggle("dark:hover:text-primary-400", !isActive);
          link.classList.toggle("hover:border-b-2", !isActive);
          link.classList.toggle("hover:border-primary-300", !isActive);
          link.classList.toggle("dark:hover:border-primary-700", !isActive);
        });

        // 更新移动端导航链接
        const mobileNavLinks = document.querySelectorAll(
          "#mobile-menu a[href]",
        );
        mobileNavLinks.forEach((link) => {
          const href = link.getAttribute("href");
          const isActive = href
            ? isPathMatchingNavItem(normalizedPath, href)
            : false;

          // 使用 classList.toggle 来切换类
          link.classList.toggle("text-white", isActive);
          link.classList.toggle("bg-primary-600", isActive);
          link.classList.toggle("dark:bg-primary-500", isActive);
          link.classList.toggle("shadow-sm", isActive);

          link.classList.toggle("text-gray-700", !isActive);
          link.classList.toggle("dark:text-gray-200", !isActive);
          link.classList.toggle("hover:bg-gray-100", !isActive);
          link.classList.toggle("dark:hover:bg-gray-800/70", !isActive);
        });
      }

      // 初始检查
      updateNavHighlight();

      // 监听路由变化
      addListener(document, "astro:page-load", updateNavHighlight);
      addListener(document, "astro:after-swap", updateNavHighlight);

      // 移动端菜单逻辑
      const mobileMenuButton = document.getElementById("mobile-menu-button");
      const mobileMenu = document.getElementById("mobile-menu");
      const menuOpenIcon = document.getElementById("menu-open-icon");
      const menuCloseIcon = document.getElementById("menu-close-icon");

      // 移动端搜索面板元素
      const mobileSearchButton = document.getElementById(
        "mobile-search-button",
      );
      const mobileSearchPanel = document.getElementById("mobile-search-panel");
      const mobileSearchClose = document.getElementById("mobile-search-close");

      // 关闭移动端菜单的函数
      function closeMobileMenu(): void {
        if (mobileMenuButton && mobileMenu && menuOpenIcon && menuCloseIcon) {
          mobileMenuButton.setAttribute("aria-expanded", "false");
          mobileMenu.classList.add("hidden");
          menuOpenIcon.classList.remove("hidden");
          menuCloseIcon.classList.add("hidden");
        }
      }

      // 关闭移动端搜索面板的函数
      function closeMobileSearch(): void {
        if (mobileSearchPanel) {
          mobileSearchPanel.classList.add("hidden");
        }
      }

      // 清空桌面搜索框的函数
      function clearDesktopSearch(): void {
        // 获取关键元素
        const searchInput = document.querySelector(
          ".pagefind-ui__search-input",
        );
        const clearButton = document.querySelector(
          ".pagefind-ui__search-clear",
        );
        const resultsContainer = document.querySelector(
          ".pagefind-ui__results",
        );

        // 隐藏搜索结果面板
        if (resultsContainer) {
          // 直接隐藏结果容器
          resultsContainer.setAttribute("style", "display: none !important");
        }

        // 如果有清除按钮，点击它清空输入框
        if (clearButton) {
          (clearButton as HTMLElement).click();
        } else if (searchInput) {
          // 备选方案，设置输入框为空
          (searchInput as HTMLInputElement).value = "";
          searchInput.dispatchEvent(new Event("input", { bubbles: true }));
        }
      }

      // 监听搜索结果链接点击事件
      function setupSearchResultListeners(): void {
        // 使用事件委托，监听整个搜索容器
        const searchContainer = document.querySelector(".pagefind-ui");
        if (searchContainer) {
          // 移除之前可能存在的事件监听器
          const existingHandler = (searchContainer as any)._clickHandler;
          if (existingHandler) {
            searchContainer.removeEventListener("click", existingHandler);
          }

          // 添加新的事件监听器
          const clickHandler = (e: Event) => {
            const target = e.target as HTMLElement;
            // 检查是否点击了搜索结果链接或其父元素
            const linkElement = target.closest(
              ".pagefind-ui__result-link, .pagefind-ui__result-title, .pagefind-ui__results a",
            );

            if (linkElement && linkElement.tagName === "A") {
              // 不做任何处理，避免干扰导航
              // 让路由变化后的处理函数来隐藏搜索面板
            }
          };

          // 存储处理函数以便后续可能的移除
          (searchContainer as any)._clickHandler = clickHandler;

          // 添加事件监听
          addListener(searchContainer, "click", clickHandler, {
            capture: true,
          });
        } else {
          console.warn("[Header] 未找到搜索容器，无法添加点击事件");
        }

        // 直接为文档添加事件监听，确保能捕获到所有点击
        addListener(
          document.body,
          "click",
          (e) => {
            const target = e.target as HTMLElement;
            const isSearchResult = target.closest(
              ".pagefind-ui__result-link, .pagefind-ui__result-title, .pagefind-ui__results a",
            );

            if (isSearchResult && isSearchResult.tagName === "A") {
              // 不做任何处理，避免干扰导航
              // 让路由变化后的处理函数来隐藏搜索面板

              // 只关闭移动端搜索面板，因为它不影响导航
              closeMobileSearch();
            }
          },
          { capture: true },
        );
      }

      // 初始化搜索功能并设置页面加载后的变化监听
      function initSearch(): void {
        setupSearchResultListeners();

        // Pagefind可能在页面加载后动态添加内容，添加MutationObserver以监视这些变化
        const pageObserver = new MutationObserver((mutations) => {
          for (const mutation of mutations) {
            if (mutation.addedNodes.length > 0) {
              // 检查是否有新添加的搜索容器或结果
              const hasNewSearchElements = Array.from(mutation.addedNodes).some(
                (node) => {
                  if (node.nodeType === Node.ELEMENT_NODE) {
                    const element = node as HTMLElement;
                    return (
                      element.classList?.contains("pagefind-ui") ||
                      element.querySelector(".pagefind-ui") !== null ||
                      element.classList?.contains("pagefind-ui__results") ||
                      element.querySelector(".pagefind-ui__results") !== null
                    );
                  }
                  return false;
                },
              );

              if (hasNewSearchElements) {
                setupSearchResultListeners();
              }
            }
          }
        });

        // 观察整个body以捕获所有变化
        pageObserver.observe(document.body, { childList: true, subtree: true });

        // 添加导航后清空搜索框的监听
        addListener(document, "astro:page-load", () => {
          // 页面加载后清空搜索框和隐藏结果面板
          setTimeout(() => {
            clearDesktopSearch();
          }, 100); // 短暂延迟确保搜索组件已加载
        });
      }

      if (mobileMenuButton && mobileMenu && menuOpenIcon && menuCloseIcon) {
        // 移动端菜单按钮点击事件
        (mobileMenuButton as HTMLElement).style.pointerEvents = "auto";

        addListener(
          mobileMenuButton,
          "click",
          (e) => {
            e.preventDefault();
            e.stopPropagation();

            const expanded =
              mobileMenuButton.getAttribute("aria-expanded") === "true";

            mobileMenuButton.setAttribute(
              "aria-expanded",
              (!expanded).toString(),
            );

            if (expanded) {
              mobileMenu.classList.add("hidden");
            } else {
              closeMobileSearch();
              mobileMenu.classList.remove("hidden");
            }

            menuOpenIcon.classList.toggle("hidden");
            menuCloseIcon.classList.toggle("hidden");
          },
          { capture: true },
        );

        // 为移动端导航链接添加点击事件
        const mobileNavLinks = document.querySelectorAll(
          "#mobile-menu a[href]",
        );
        mobileNavLinks.forEach((link) => {
          (link as HTMLElement).style.pointerEvents = "auto";
          addListener(
            link,
            "click",
            (e) => {
              e.stopPropagation();
              closeMobileMenu();
            },
            { capture: true },
          );
        });
      }

      // 移动端搜索按钮
      if (mobileSearchButton && mobileSearchPanel) {
        (mobileSearchButton as HTMLElement).style.pointerEvents = "auto";

        addListener(
          mobileSearchButton,
          "click",
          (e) => {
            e.preventDefault();
            e.stopPropagation();

            const isSearchVisible =
              !mobileSearchPanel.classList.contains("hidden");

            if (isSearchVisible) {
              closeMobileSearch();
            } else {
              closeMobileMenu();
              mobileSearchPanel.classList.remove("hidden");
            }
          },
          { capture: true },
        );

        // 搜索面板关闭按钮
        if (mobileSearchClose) {
          (mobileSearchClose as HTMLElement).style.pointerEvents = "auto";
          addListener(
            mobileSearchClose,
            "click",
            (e) => {
              e.preventDefault();
              e.stopPropagation();
              closeMobileSearch();
            },
            { capture: true },
          );
        }
      }

      // 初始化搜索功能
      initSearch();

      // 路由变化时处理
      const routeEvents = [
        "astro:page-load", // Astro路由导航完成
        "astro:after-swap", // Astro视图变化后
      ];

      routeEvents.forEach((eventName) => {
        addListener(document, eventName, () => {
          // 页面加载后清空搜索框和隐藏结果面板
          clearDesktopSearch();
          closeMobileSearch();
        });
      });

      // 直接监听popstate和pushstate事件
      addListener(window, "popstate", () => {
        clearDesktopSearch();
        closeMobileSearch();
      });

      // 添加自定义监听处理history API
      const originalPushState = history.pushState;
      history.pushState = function (...args) {
        // 调用原始方法
        const result = originalPushState.apply(
          this,
          args as [any, string, string | URL | null],
        );

        // 触发自定义事件
        const event = new Event("pushstate");
        window.dispatchEvent(event);

        // 在pushstate时清空搜索面板
        clearDesktopSearch();
        closeMobileSearch();

        return result;
      };

      addListener(window, "pushstate", () => {
        clearDesktopSearch();
        closeMobileSearch();
      });
    }

    // 注册清理函数
    function registerCleanup(): void {
      document.addEventListener("astro:before-preparation", cleanup, {
        once: true,
      });
      document.addEventListener("astro:before-swap", cleanup, { once: true });
      document.addEventListener("swup:willReplaceContent", cleanup, {
        once: true,
      });
      window.addEventListener("beforeunload", cleanup, { once: true });
    }

    // 初始化全部功能
    function setupHeader(): void {
      cleanup();
      initHeader();
      registerCleanup();
    }

    // 在页面加载时初始化
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", setupHeader, {
        once: true,
      });
    } else {
      setTimeout(setupHeader, 0);
    }

    // 在页面转换后重新初始化
    document.addEventListener("astro:after-swap", setupHeader);
    document.addEventListener("astro:page-load", setupHeader);
  })();
</script>

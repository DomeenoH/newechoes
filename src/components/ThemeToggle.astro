---
interface Props {
  height?: number;
  width?: number;
  fill?: string;
  className?: string;
}

const { 
  height = 16, 
  width = 16, 
  fill = "currentColor", 
  className = "" 
} = Astro.props;
---

<button
  id="theme-toggle-button"
  class={`inline-flex items-center justify-center h-8 w-8 cursor-pointer rounded-md hover:bg-gray-100 dark:hover:bg-gray-700/50 text-secondary-600 dark:text-secondary-400 hover:text-primary-600 dark:hover:text-primary-400 ${className}`}
  aria-label="切换主题"
  role="button"
  tabindex="0"
>
  <!-- 月亮图标 (暗色模式) -->
  <svg
    id="dark-icon"
    style={`height: ${height}px; width: ${width}px;`}
    fill={fill}
    viewBox="0 0 16 16"
    class="hover:scale-110 hidden dark:block"
    aria-hidden="true"
  >
    <path d="M6 .278a.768.768 0 0 1 .08.858 7.208 7.208 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277.527 0 1.04-.055 1.533-.16a.787.787 0 0 1 .81.316.733.733 0 0 1-.031.893A8.349 8.349 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.752.752 0 0 1 6 .278z"/>
  </svg>
  
  <!-- 太阳图标 (亮色模式) -->
  <svg
    id="light-icon"
    style={`height: ${height}px; width: ${width}px;`}
    fill={fill}
    viewBox="0 0 16 16"
    class="hover:scale-110 block dark:hidden"
    aria-hidden="true"
  >
    <path d="M8 12a4 4 0 1 0 0-8 4 4 0 0 0 0 8zM8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0zm0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13zm8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zM3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8zm10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0zm-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707zM4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z"/>
  </svg>
</button>

<script is:inline>
// 主题切换逻辑
(function() {
  
  // 页面导航计数器（跟踪页面跳转次数）
  let pageNavigationCount = 0;
  
  // 存储事件监听器，便于统一清理
  const listeners = [];
  
  // 定时器
  let transitionTimeout = null;
  
  // 直接从按钮移除事件监听器
  function cleanupButtonListeners() {
    // 查找所有主题切换按钮
    const buttons = document.querySelectorAll('#theme-toggle-button');
    
    buttons.forEach(button => {
      // 移除所有可能的事件
      if (button._clickHandler) {
        button.removeEventListener('click', button._clickHandler, { capture: true });
        delete button._clickHandler;
      }
      
      if (button._keydownHandler) {
        button.removeEventListener('keydown', button._keydownHandler);
        delete button._keydownHandler;
      }
      
      // 清除其他可能的事件
      const otherClickHandlers = button.__themeToggleClickHandlers || [];
      otherClickHandlers.forEach(handler => {
        try {
          button.removeEventListener('click', handler, { capture: true });
        } catch (e) {
          // 忽略错误
        }
      });
      
      const otherKeydownHandlers = button.__themeToggleKeydownHandlers || [];
      otherKeydownHandlers.forEach(handler => {
        try {
          button.removeEventListener('keydown', handler);
        } catch (e) {
          // 忽略错误
        }
      });
      
      // 重置处理函数数组
      button.__themeToggleClickHandlers = [];
      button.__themeToggleKeydownHandlers = [];
    });
    
    // 清理容器
    const container = document.getElementById('theme-toggle-container');
    if (container) {
      if (container._clickHandler) {
        container.removeEventListener('click', container._clickHandler);
        delete container._clickHandler;
      }
      
      // 清除其他可能的事件
      const otherClickHandlers = container.__themeToggleClickHandlers || [];
      otherClickHandlers.forEach(handler => {
        try {
          container.removeEventListener('click', handler);
        } catch (e) {
          // 忽略错误
        }
      });
      
      // 重置处理函数数组
      container.__themeToggleClickHandlers = [];
    }
  }
  
  // 添加事件监听器并记录，方便后续统一清理
  function addListener(element, eventType, handler, options) {
    if (!element) return null;
    
    // 确保先移除可能已存在的同类型事件处理函数
    if (eventType === 'click' && element.id === 'theme-toggle-button') {
      if (element._clickHandler) {
        element.removeEventListener('click', element._clickHandler, { capture: true });
      }
      element._clickHandler = handler;
      
      // 保存到数组中以便清理
      if (!element.__themeToggleClickHandlers) {
        element.__themeToggleClickHandlers = [];
      }
      element.__themeToggleClickHandlers.push(handler);
    }
    
    if (eventType === 'keydown' && element.id === 'theme-toggle-button') {
      if (element._keydownHandler) {
        element.removeEventListener('keydown', element._keydownHandler);
      }
      element._keydownHandler = handler;
      
      // 保存到数组中以便清理
      if (!element.__themeToggleKeydownHandlers) {
        element.__themeToggleKeydownHandlers = [];
      }
      element.__themeToggleKeydownHandlers.push(handler);
    }
    
    if (eventType === 'click' && element.id === 'theme-toggle-container') {
      if (element._clickHandler) {
        element.removeEventListener('click', element._clickHandler);
      }
      element._clickHandler = handler;
      
      // 保存到数组中以便清理
      if (!element.__themeToggleClickHandlers) {
        element.__themeToggleClickHandlers = [];
      }
      element.__themeToggleClickHandlers.push(handler);
    }
    
    element.addEventListener(eventType, handler, options);
    listeners.push({ element, eventType, handler, options });
    return handler;
  }
  
  // 清理函数 - 移除所有事件监听器
  function cleanup() {
    // 先直接从按钮清理事件
    cleanupButtonListeners();
    
    // 移除所有监听器
    listeners.forEach(({ element, eventType, handler, options }) => {
      try {
        element.removeEventListener(eventType, handler, options);
      } catch (err) {
        // 忽略错误
      }
    });
    
    // 清空数组
    listeners.length = 0;
    
    // 清理任何定时器
    if (transitionTimeout) {
      clearTimeout(transitionTimeout);
      transitionTimeout = null;
    }
  }
  
  // 初始化主题切换功能
  function setupThemeToggle() {
    // 确保当前没有活动的主题切换按钮事件
    cleanup();
    
    // 获取所有主题切换按钮
    const themeToggleButtons = document.querySelectorAll('#theme-toggle-button');
    
    if (!themeToggleButtons.length) {
      return;
    }
    
    let transitioning = false;
    
    // 获取系统首选主题
    const getSystemTheme = () => {
      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    };

    // 初始化主题
    const initializeTheme = () => {
      const storedTheme = localStorage.getItem('theme');
      const systemTheme = getSystemTheme();
      
      // 按照逻辑优先级应用主题
      if (storedTheme) {
        document.documentElement.dataset.theme = storedTheme;
      } else if (systemTheme) {
        document.documentElement.dataset.theme = systemTheme;
      } else {
        document.documentElement.dataset.theme = 'light';
      }
    };
    
    // 切换主题
    const toggleTheme = () => {
      if (transitioning) {
        return;
      }
      
      transitioning = true;
      
      // 获取当前主题
      const currentTheme = document.documentElement.dataset.theme;
      const newTheme = currentTheme === 'light' ? 'dark' : 'light';
      
      // 更新 HTML 属性
      document.documentElement.dataset.theme = newTheme;
      
      // 更新本地存储
      const systemTheme = getSystemTheme();
      
      if (newTheme === systemTheme) {
        localStorage.removeItem('theme');
      } else {
        localStorage.setItem('theme', newTheme);
      }
      
      // 添加防抖
      if (transitionTimeout) {
        clearTimeout(transitionTimeout);
      }
      
      transitionTimeout = setTimeout(() => {
        transitioning = false;
      }, 300);
    };
    
    // 监听系统主题变化
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    
    const handleMediaChange = (e) => {
      if (!localStorage.getItem('theme')) {
        const newTheme = e.matches ? 'dark' : 'light';
        document.documentElement.dataset.theme = newTheme;
      }
    };
    
    // 添加系统主题变化监听
    addListener(mediaQuery, 'change', handleMediaChange);

    // 为每个按钮添加事件
    themeToggleButtons.forEach((button, index) => {
      // 确保移除旧的事件监听
      if (button._clickHandler) {
        button.removeEventListener('click', button._clickHandler, { capture: true });
      }
      if (button._keydownHandler) {
        button.removeEventListener('keydown', button._keydownHandler);
      }
      
      try {
        button.style.pointerEvents = 'auto';
      } catch (e) {
        // 忽略样式错误
      }
      
      // 创建点击处理函数
      const clickHandler = (e) => {
        e.preventDefault();
        e.stopPropagation();
        toggleTheme();
      };
      
      // 点击事件 - 使用捕获模式并保存引用
      addListener(button, 'click', clickHandler, { capture: true });
      
      // 键盘事件
      const keydownHandler = (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          toggleTheme();
        }
      };
      addListener(button, 'keydown', keydownHandler);
    });
    
    // 处理移动端主题切换容器
    const themeToggleContainer = document.getElementById('theme-toggle-container');
    if (themeToggleContainer) {
      // 确保移除旧的事件监听
      if (themeToggleContainer._clickHandler) {
        themeToggleContainer.removeEventListener('click', themeToggleContainer._clickHandler);
      }
      
      const containerClickHandler = (e) => {
        const target = e.target;
        if (target.id !== 'theme-toggle-button' && !target.closest('#theme-toggle-button')) {
          e.stopPropagation();
          toggleTheme();
        }
      };
      
      addListener(themeToggleContainer, 'click', containerClickHandler);
    }
    
    // 初始化主题
    initializeTheme();
  }
  
  // 注册清理函数 - 确保在每次页面转换前清理事件
  function registerCleanup() {
    const cleanupEvents = [
      'astro:before-preparation',
      'astro:before-swap',
      'swup:willReplaceContent'
    ];
    
    // 为每个事件注册一次性清理函数
    cleanupEvents.forEach(eventName => {
      const handler = () => {
        cleanup();
      };
      
      document.addEventListener(eventName, handler, { once: true });
    });
    
    // 页面卸载时清理
    window.addEventListener('beforeunload', () => {
      cleanup();
    }, { once: true });
  }
  
  // 初始化函数
  function init() {
    pageNavigationCount++;
    setupThemeToggle();
    registerCleanup();
  }
  
  // 监听页面转换事件
  function setupPageTransitionEvents() {
    // 确保事件处理程序唯一性的函数
    function setupUniqueEvent(eventName, callback) {
      const eventKey = `__theme_toggle_event_${eventName.replace(/:/g, '_')}`;
      
      // 移除可能存在的旧处理函数
      if (window[eventKey]) {
        document.removeEventListener(eventName, window[eventKey]);
      }
      
      // 保存新处理函数并注册
      window[eventKey] = callback;
      document.addEventListener(eventName, window[eventKey]);
    }
    
    // 页面转换后事件
    const pageTransitionEvents = [
      { name: 'astro:after-swap', delay: 10 },
      { name: 'astro:page-load', delay: 10 },
      { name: 'swup:contentReplaced', delay: 10 }
    ];
    
    // 设置每个页面转换事件
    pageTransitionEvents.forEach(({ name, delay }) => {
      setupUniqueEvent(name, () => {
        cleanupButtonListeners(); // 立即清理按钮上的事件
        
        // 延迟初始化，确保DOM完全更新
        setTimeout(() => {
          cleanupButtonListeners(); // 再次清理，确保没有遗漏
          init();
        }, delay);
      });
    });
    
    // 特别处理 swup:pageView 事件
    setupUniqueEvent('swup:pageView', () => {
      // 对于偶数次页面跳转，特别确保事件被正确重新绑定
      if (pageNavigationCount % 2 === 0) {
        setTimeout(() => {
          const buttons = document.querySelectorAll('#theme-toggle-button');
          if (buttons.length > 0) {
            cleanupButtonListeners();
            setupThemeToggle();
          }
        }, 50);
      }
    });
  }
  
  // 设置页面转换事件监听
  setupPageTransitionEvents();
  
  // 在页面加载后初始化
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      init();
    }, { once: true });
  } else {
    setTimeout(() => {
      init();
    }, 0);
  }
})();
</script> 
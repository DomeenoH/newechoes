---
interface Props {
  height?: number;
  width?: number;
  fill?: string;
  className?: string;
}

const { 
  height = 16, 
  width = 16, 
  fill = "currentColor", 
  className = "" 
} = Astro.props;
---

<button
  id="theme-toggle-button"
  class={`inline-flex items-center justify-center h-8 w-8 cursor-pointer rounded-md hover:bg-gray-100 dark:hover:bg-gray-700/50 text-secondary-600 dark:text-secondary-400 hover:text-primary-600 dark:hover:text-primary-400 ${className}`}
  aria-label="切换主题"
  role="button"
  tabindex="0"
>
  <!-- 月亮图标 (暗色模式) -->
  <svg
    id="dark-icon"
    style={`height: ${height}px; width: ${width}px;`}
    fill={fill}
    viewBox="0 0 16 16"
    class="hover:scale-110 hidden dark:block"
    aria-hidden="true"
  >
    <path d="M6 .278a.768.768 0 0 1 .08.858 7.208 7.208 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277.527 0 1.04-.055 1.533-.16a.787.787 0 0 1 .81.316.733.733 0 0 1-.031.893A8.349 8.349 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.752.752 0 0 1 6 .278z"/>
  </svg>
  
  <!-- 太阳图标 (亮色模式) -->
  <svg
    id="light-icon"
    style={`height: ${height}px; width: ${width}px;`}
    fill={fill}
    viewBox="0 0 16 16"
    class="hover:scale-110 block dark:hidden"
    aria-hidden="true"
  >
    <path d="M8 12a4 4 0 1 0 0-8 4 4 0 0 0 0 8zM8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0zm0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13zm8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zM3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8zm10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0zm-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707zM4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z"/>
  </svg>
</button>

<script>
// 主题切换逻辑
(function() {
  const DEBUG = true; // 调试模式开关
  
  // 调试日志
  function logDebug(...args: any[]): void {
    if (DEBUG) {
      console.log('[ThemeToggle]', ...args);
    }
  }

  logDebug('主题切换脚本初始化');
  
  // 页面导航计数器（跟踪页面跳转次数）
  let pageNavigationCount = 0;
  
  // 存储所有事件监听器，便于统一清理
  const listeners: Array<{
    element: EventTarget;
    eventType: string;
    handler: EventListenerOrEventListenerObject;
  }> = [];
  
  // 定时器
  let transitionTimeout: ReturnType<typeof setTimeout> | null = null;
  
  // 添加事件监听器并记录，方便后续统一清理
  function addListener<K extends keyof HTMLElementEventMap>(
    element: EventTarget | null,
    eventType: string,
    handler: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions
  ): EventListenerOrEventListenerObject | null {
    if (!element) return null;
    
    element.addEventListener(eventType, handler, options);
    listeners.push({ element, eventType, handler });
    logDebug(`添加事件监听器: ${eventType}`, element);
    return handler;
  }
  
  // 清理函数 - 移除所有事件监听器
  function cleanup(): void {
    logDebug(`清理前事件监听器数量: ${listeners.length}`);
    
    // 移除所有监听器
    listeners.forEach(({ element, eventType, handler }) => {
      try {
        element.removeEventListener(eventType, handler);
      } catch (err) {
        console.error(`移除主题切换事件监听器出错:`, err);
      }
    });
    
    // 清空数组
    listeners.length = 0;
    
    // 清理任何定时器
    if (transitionTimeout) {
      clearTimeout(transitionTimeout);
      transitionTimeout = null;
    }
    
    logDebug('所有事件监听器已清理');
  }
  
  // 初始化主题切换功能
  function setupThemeToggle(): void {
    logDebug(`设置主题切换，页面导航计数: ${pageNavigationCount}`);
    
    // 确保当前没有活动的主题切换按钮事件
    cleanup();
    
    // 获取所有主题切换按钮
    const themeToggleButtons = document.querySelectorAll('#theme-toggle-button');
    
    logDebug(`找到 ${themeToggleButtons.length} 个主题切换按钮`);
    
    if (!themeToggleButtons.length) {
      return;
    }
    
    let transitioning = false;
    
    // 获取系统首选主题
    const getSystemTheme = (): string => {
      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    };

    // 初始化主题
    const initializeTheme = (): void => {
      const storedTheme = localStorage.getItem('theme');
      const systemTheme = getSystemTheme();
      
      logDebug(`初始化主题: 存储主题=${storedTheme}, 系统主题=${systemTheme}`);
      
      // 按照逻辑优先级应用主题
      if (storedTheme) {
        document.documentElement.dataset.theme = storedTheme;
      } else if (systemTheme) {
        document.documentElement.dataset.theme = systemTheme;
      } else {
        document.documentElement.dataset.theme = 'light';
      }
      
      logDebug(`应用主题: ${document.documentElement.dataset.theme}`);
    };
    
    // 切换主题
    const toggleTheme = (): void => {
      logDebug('尝试切换主题, 状态:', { transitioning });
      
      if (transitioning) {
        return;
      }
      
      transitioning = true;
      
      // 获取当前主题
      const currentTheme = document.documentElement.dataset.theme;
      const newTheme = currentTheme === 'light' ? 'dark' : 'light';
      
      logDebug(`切换主题: ${currentTheme} => ${newTheme}`);
      
      // 更新 HTML 属性
      document.documentElement.dataset.theme = newTheme;
      
      // 更新本地存储
      const systemTheme = getSystemTheme();
      
      if (newTheme === systemTheme) {
        localStorage.removeItem('theme');
        logDebug('移除本地存储的主题（使用系统主题）');
      } else {
        localStorage.setItem('theme', newTheme);
        logDebug(`保存主题到本地存储: ${newTheme}`);
      }
      
      // 添加防抖
      if (transitionTimeout) {
        clearTimeout(transitionTimeout);
      }
      
      transitionTimeout = setTimeout(() => {
        transitioning = false;
        logDebug('主题切换冷却结束');
      }, 300);
    };
    
    // 监听系统主题变化
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    
    const handleMediaChange = (e: MediaQueryListEvent): void => {
      logDebug(`系统主题变化: ${e.matches ? 'dark' : 'light'}`);
      if (!localStorage.getItem('theme')) {
        const newTheme = e.matches ? 'dark' : 'light';
        document.documentElement.dataset.theme = newTheme;
        logDebug(`应用系统主题: ${newTheme}`);
      }
    };
    
    // 添加系统主题变化监听
    addListener(mediaQuery, 'change', handleMediaChange as EventListener);

    // 为每个按钮添加事件
    themeToggleButtons.forEach((button, index) => {
      (button as HTMLElement).style.pointerEvents = 'auto';
      logDebug(`设置按钮 #${index} 事件`);
      
      // 创建点击处理函数
      const clickHandler = (e: Event) => {
        logDebug(`按钮 #${index} 被点击`, e);
        e.preventDefault();
        e.stopPropagation();
        toggleTheme();
      };
      
      // 点击事件 - 使用捕获模式
      addListener(button, 'click', clickHandler, { capture: true });
      
      // 键盘事件
      addListener(button, 'keydown', ((e: KeyboardEvent) => {
        if (e.key === 'Enter' || e.key === ' ') {
          logDebug(`按钮 #${index} 键盘触发: ${e.key}`);
          e.preventDefault();
          toggleTheme();
        }
      }) as EventListener);
    });
    
    // 处理移动端主题切换容器
    const themeToggleContainer = document.getElementById('theme-toggle-container');
    if (themeToggleContainer) {
      logDebug('设置主题切换容器事件');
      addListener(themeToggleContainer, 'click', (e: Event) => {
        const target = e.target as HTMLElement;
        if (target.id !== 'theme-toggle-button' && !target.closest('#theme-toggle-button')) {
          logDebug('主题切换容器被点击');
          e.stopPropagation();
          toggleTheme();
        }
      });
    }
    
    // 初始化主题
    initializeTheme();
  }
  
  // 注册清理函数
  function registerCleanup(): void {
    logDebug('注册清理函数');
    
    // Astro 事件
    document.addEventListener('astro:before-preparation', () => {
      logDebug('触发 astro:before-preparation');
      cleanup();
    }, { once: true });
    
    document.addEventListener('astro:before-swap', () => {
      logDebug('触发 astro:before-swap');
      cleanup();
    }, { once: true });
    
    // Swup 事件
    document.addEventListener('swup:willReplaceContent', () => {
      logDebug('触发 swup:willReplaceContent');
      cleanup();
    }, { once: true });
    
    // 页面卸载
    window.addEventListener('beforeunload', () => {
      logDebug('触发 beforeunload');
      cleanup();
    }, { once: true });
  }
  
  // 初始化函数
  function init(): void {
    pageNavigationCount++;
    logDebug(`初始化主题切换 (页面导航 #${pageNavigationCount})`);
    setupThemeToggle();
    registerCleanup();
  }
  
  // 在页面加载后初始化
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      logDebug('DOMContentLoaded 事件触发');
      init();
    }, { once: true });
  } else {
    setTimeout(() => {
      logDebug('延迟初始化');
      init();
    }, 0);
  }
  
  // 在页面转换后重新初始化
  document.addEventListener('astro:after-swap', () => {
    logDebug('astro:after-swap 事件触发');
    init();
  });
  
  document.addEventListener('astro:page-load', () => {
    logDebug('astro:page-load 事件触发');
    init();
  });
  
  // Swup页面内容替换后重新初始化
  document.addEventListener('swup:contentReplaced', () => {
    logDebug('swup:contentReplaced 事件触发');
    init();
  });

  // 新增：监听swup事件更完整
  document.addEventListener('swup:animationInStart', () => {
    logDebug('swup:animationInStart 事件触发');
  });
  
  document.addEventListener('swup:animationInDone', () => {
    logDebug('swup:animationInDone 事件触发');
  });
  
  document.addEventListener('swup:animationOutStart', () => {
    logDebug('swup:animationOutStart 事件触发');
  });
  
  document.addEventListener('swup:animationOutDone', () => {
    logDebug('swup:animationOutDone 事件触发');
  });
  
  document.addEventListener('swup:pageView', () => {
    logDebug('swup:pageView 事件触发');
    // 额外保障：页面切换后确保主题切换按钮正常工作
    setTimeout(() => {
      const buttons = document.querySelectorAll('#theme-toggle-button');
      if (buttons.length > 0) {
        logDebug(`swup:pageView 后检测到 ${buttons.length} 个主题按钮，重新初始化`);
        setupThemeToggle();
      }
    }, 100);
  });
})();
</script> 